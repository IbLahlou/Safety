name: Simple Safety Test

on:
  workflow_dispatch:  # Manual trigger only - no automatic runs
  push:
    branches: [ main ]

jobs:
  basic-test:
    name: Basic Safety System Test
    runs-on: self-hosted
    timeout-minutes: 10
    
    steps:
      # ===================================
      # STEP 1: Basic System Check
      # ===================================
      - name: System Information
        run: |
          echo "=== SYSTEM INFO ==="
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Date: $(date)"
          echo "Python version: $(python3 --version)"
          echo "Available disk space:"
          df -h
          echo ""
          
      # ===================================
      # STEP 2: Find Your Safety Project
      # ===================================
      - name: Locate Safety Project
        run: |
          echo "=== FINDING SAFETY PROJECT ==="
          echo "Looking for safety folder..."
          find /home -name "safety" -type d 2>/dev/null | head -5
          echo ""
          echo "Current location contents:"
          ls -la
          echo ""
          
      # ===================================
      # STEP 3: Check Safety Directory
      # ===================================
      - name: Check Safety Directory
        run: |
          echo "=== SAFETY DIRECTORY CHECK ==="
          SAFETY_PATH="/home/sysadmin01/Desktop/PFE/safety"
          
          if [ -d "$SAFETY_PATH" ]; then
            echo "‚úÖ Safety directory found at: $SAFETY_PATH"
            echo "Contents:"
            ls -la "$SAFETY_PATH" | head -10
          else
            echo "‚ùå Safety directory not found at expected location"
            echo "Searching for it..."
            find /home -name "safety" -type d 2>/dev/null
          fi
          echo ""
          
      # ===================================
      # STEP 4: Check Python Environment
      # ===================================
      - name: Check Python Environment
        run: |
          echo "=== PYTHON ENVIRONMENT CHECK ==="
          SAFETY_PATH="/home/sysadmin01/Desktop/PFE/safety"
          
          if [ -d "$SAFETY_PATH" ]; then
            cd "$SAFETY_PATH"
            echo "Current directory: $(pwd)"
            
            if [ -f ".venv/bin/activate" ]; then
              echo "‚úÖ Virtual environment found"
              source .venv/bin/activate
              echo "‚úÖ Virtual environment activated"
              echo "Python path: $(which python)"
              echo "Pip list (first 10 packages):"
              pip list | head -10
            else
              echo "‚ùå Virtual environment not found"
              echo "Looking for .venv directory..."
              find . -name ".venv" -type d 2>/dev/null
            fi
          else
            echo "‚ùå Cannot proceed - safety directory not found"
          fi
          echo ""
          
      # ===================================
      # STEP 5: Check Application Files
      # ===================================
      - name: Check Application Files
        run: |
          echo "=== APPLICATION FILES CHECK ==="
          SAFETY_PATH="/home/sysadmin01/Desktop/PFE/safety"
          
          if [ -d "$SAFETY_PATH" ]; then
            cd "$SAFETY_PATH"
            
            echo "üîç Intrusion Detection App:"
            INTRUSION_APP="/home/sysadmin01/Desktop/PFE/safety/Intrusion_Detection/perspective_distorsion/app.py"
            if [ -f "$INTRUSION_APP" ]; then
              echo "‚úÖ Found: $INTRUSION_APP"
              echo "Size: $(ls -lh "$INTRUSION_APP" | awk '{print $5}')"
            else
              echo "‚ùå Not found: $INTRUSION_APP"
              echo "Looking for app.py files..."
              find . -name "app.py" -type f 2>/dev/null
            fi
            
            echo ""
            echo "ü¶∫ PPE Detection Weights:"
            PPE_WEIGHTS="/home/sysadmin01/Desktop/PFE/safety/PPE_Detection/experiments/checkpoints/yolo11n_v6.pt"
            if [ -f "$PPE_WEIGHTS" ]; then
              echo "‚úÖ Found: $PPE_WEIGHTS"
              echo "Size: $(ls -lh "$PPE_WEIGHTS" | awk '{print $5}')"
            else
              echo "‚ùå Not found: $PPE_WEIGHTS"
              echo "Looking for .pt files..."
              find . -name "*.pt" -type f 2>/dev/null | head -5
            fi
          fi
          echo ""
          
      # ===================================
      # STEP 6: Simple Python Test
      # ===================================
      - name: Simple Python Test
        run: |
          echo "=== PYTHON IMPORT TEST ==="
          SAFETY_PATH="/home/sysadmin01/Desktop/PFE/safety"
          
          if [ -d "$SAFETY_PATH" ]; then
            cd "$SAFETY_PATH"
            
            if [ -f ".venv/bin/activate" ]; then
              source .venv/bin/activate
              
              echo "Testing basic imports..."
              
              # Test Flask
              if python -c "import flask; print('‚úÖ Flask available')" 2>/dev/null; then
                echo "‚úÖ Flask: OK"
              else
                echo "‚ùå Flask: Not available"
              fi
              
              # Test OpenCV
              if python -c "import cv2; print('‚úÖ OpenCV available')" 2>/dev/null; then
                echo "‚úÖ OpenCV: OK"
              else
                echo "‚ùå OpenCV: Not available"
              fi
              
              # Test basic modules
              python -c "
import sys
print('‚úÖ Python sys module working')
print('Python executable:', sys.executable)
print('Python version:', sys.version)
              "
              
            else
              echo "‚ùå Cannot test - virtual environment not found"
            fi
          fi
          echo ""
          
      # ===================================
      # STEP 7: Network Test
      # ===================================
      - name: Network Test
        run: |
          echo "=== NETWORK TEST ==="
          echo "Testing internet connectivity..."
          
          if ping -c 1 google.com >/dev/null 2>&1; then
            echo "‚úÖ Internet connection: OK"
          else
            echo "‚ùå Internet connection: Failed"
          fi
          
          echo "Testing local ports..."
          netstat -tuln | grep -E ":500[0-9]" || echo "No Flask apps currently running"
          echo ""
          
      # ===================================
      # STEP 8: Summary Report
      # ===================================
      - name: Final Summary
        run: |
          echo "=================================="
          echo "üéâ WORKFLOW COMPLETED SUCCESSFULLY"
          echo "=================================="
          echo "This basic test workflow ran without errors!"
          echo "Next steps:"
          echo "1. ‚úÖ Your GitHub Actions runner is working"
          echo "2. ‚úÖ Your system can run workflows"
          echo "3. üîÑ You can now try more advanced workflows"
          echo ""
          echo "Time completed: $(date)"
          echo "=================================="
